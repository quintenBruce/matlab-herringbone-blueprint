%
% Written By: QB
% On: 02/17/2024
%


% input parameters
width = 40;
height = 60;
boardWidth = 4.5;
centerZigZag = true;

%-------------------program initialization---------------------------------------------------

figure;
hold on;

% Calculate the x-coordinate of the middle of herring bone pattern
x_middle = (width / 2);

if centerZigZag == true
   x_middle = x_middle + (verticalDrop / 4);
end

% the vertical distance from one board to the next
verticalDrop = sqrt(boardWidth^2 + boardWidth^2);

totalMagnitude = 0;
lengthList = [];

xlimit = [0 width];
ylimit = [0  height];
xbox = xlimit([1 1 2 2 1]); % [0, 0, width, width, 0]
ybox = ylimit([1 2 2 1 1]); % [0, height, height, 0, 0]

% An arbitrary length that must be longer than any possible line within the
% rectangle. Needed to find intersection points of line equation and
% rectangle boundaries.
line_length = height + width;

% Plot the rectangle
rectangle('Position', [x, y, width, height], 'EdgeColor', 'black', 'LineWidth', 2);

% Plot middle line
plot([width/2, width/2], [0, height], 'k--', 'LineWidth', 1);

%-----------------------------main algorithm---------------------------------------------------


% Calculate the y-coordinate where the line nearly touches the edge of the rectangle
y_start = height -.00001 - verticalDrop;

counter = 1;
while y_start > 0
    mag = lineHelper(x_middle, y_start, xbox, ybox, line_length, -45, 'blue', "bo", boardWidth, -45);
    lengthList = [lengthList,  mag];
    totalMagnitude = totalMagnitude + mag;
    pause(.05);

    mag = lineHelper(x_middle, y_start, xbox, ybox, line_length, -135, 'red', "ro", 0, 45);
    lengthList = [lengthList,  mag];
    totalMagnitude = totalMagnitude + mag;
    pause(.05);

    y_start = y_start - verticalDrop;
    counter = counter + 1;
end

x_start = x_middle;

while x_start > 0
    mag = lineHelper(x_start, height-.00001, xbox, ybox, line_length, -135, "black", "ko", 0, 0);
    totalMagnitude = totalMagnitude + mag;
    lengthList = [lengthList,  mag];
    pause(.05);

    x_start = x_start - verticalDrop;
    counter = counter + 1;
end

x_start = x_middle;
while x_start < width
    mag = lineHelper(x_start, height-.00001, xbox, ybox, line_length, -45, "green", "go", 0, 0);
    totalMagnitude = totalMagnitude + mag;
    lengthList = [lengthList,  mag];
    pause(.05);

    x_start = x_start + verticalDrop;
    counter = counter + 1;
end

sortedList = sort(lengthList);
disp(sortedList)

totalMagnitude
% Set ax_intersects limits based on the rectangle dimensions
axis([x, x+width+2, y, y+height+2]);
% pause(100);



function magnitude = lineHelper(x_start, y_start, xbox, ybox, line_length, degree, color, pointColor, extensionLength, labelRotation)
    % Function body
    x_end = x_start + line_length * cosd(degree);
    y_end = y_start + line_length * sind(degree);


    [x_intersect,y_intersect] = polyxpoly([x_start, x_end], [y_start, y_end],xbox,ybox);


    %extend or retract start point along the line by length <extention> 
    [x_extended, y_extended] = extendPointAlongLine([x_start, x_intersect], [y_start, y_intersect], extensionLength);

    plotLineAndPoints([x_extended, x_intersect], [y_extended, y_intersect], color, pointColor);

    % Calculate the midpoint
    midpoint_x = (x_start + x_intersect) / 2;
    midpoint_y = (y_start + y_intersect) / 2;
    
    magnitude = norm([x_intersect - x_extended, y_intersect- y_extended]);
    text(midpoint_x, midpoint_y, num2str(magnitude), 'Rotation', labelRotation, 'Color', "black", 'FontSize', 12);
end

function [x_extended, y_extended] = extendPointAlongLine(x_coords, y_coords, distance)
    % Calculate the vector representing the line
    line_vector = [x_coords(2) - x_coords(1), y_coords(2) - y_coords(1)];

    % Normalize the vector
    line_vector_normalized = line_vector / norm(line_vector);

    % Calculate the new endpoint coordinates
    x_extended = x_coords(1) - distance * line_vector_normalized(1);
    y_extended = y_coords(1) - distance * line_vector_normalized(2);
end

function plotLineAndPoints(x_coords, y_coords, color, pointColor)
    plot(x_coords(1), y_coords(1), pointColor, 'MarkerSize', 7);
    plot(x_coords(2), y_coords(2), pointColor, 'MarkerSize', 7);
    plot(x_coords, y_coords, color, "LineWidth", 2);
end

